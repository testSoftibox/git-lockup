#!/usr/bin/python
import os, sys, subprocess
import ed25519
import base64

def run(cmd):
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    stdout = p.communicate()[0]
    if p.returncode != 0:
        print >>sys.stderr, "Error running '%s': rc=%s" % \
              (" ".join(cmd), p.returncode)
        raise Exception()
    return stdout

def remove_prefix(s, prefix):
    if not s.startswith(prefix):
        return None
    return s[len(prefix):]

print "--"
print "IN POST-COMMIT"
print "CWD is", os.getcwd()
for name in sorted(os.environ):
    if name.startswith("GIT"):
        print "%s: %s" % (name, os.environ[name])
print "--"
rev = run(["git", "rev-parse", "HEAD"]).strip()
fullbranch = run(["git", "rev-parse", "--symbolic-full-name", "HEAD"]).strip()
branch = remove_prefix(fullbranch, "refs/heads/")
if not branch:
    print "not commiting to refs/heads/ , ignoring"
    sys.exit(0)
pieces = branch.split("/")
if "." in pieces or ".." in pieces:
    print "scary branch name %s, ignoring" % branch
    sys.exit(0)
print "branch:", branch
print "HEAD:", rev
msg = "%s=%s" % (branch, rev)
print "MSG:", msg

gitdir = os.path.abspath(os.getenv("GIT_DIR"))
keyfile = os.path.join(gitdir, "Assure", "keys", *pieces)
try:
    sk_s = open(keyfile, "rb").read()
except EnvironmentError:
    print "No signing key in '%s', ignoring" % keyfile
    sys.exit(0)
sk_s = remove_prefix(sk_s, "sign0-")
if not sk_s:
    raise Exception("Unrecognized signing key in '%s'" % keyfile)
sk = ed25519.SigningKey(sk_s)
vk = sk.get_verifying_key()
vk_s = "verf0-"+base64.b64encode(vk.to_string())
sig = sk.sign(msg)
sig_s = "sig0-"+base64.b64encode(sig)
line = "assure: %s %s %s" % (msg, sig_s, vk_s)
print line

run(["git", "notes", "append", "-m", line, rev])
print "note added"
