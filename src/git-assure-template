#!/usr/bin/python

# I am the globally-installed "git-assure" tool. My commands:
#  * setup-publish: install publishing tools into the local git tree,
#                   use them to create a "setup-assure" script for
#                   subscribers

#<-- common

assure_tool_b64 = """
#<-- assure_tool-b64
"""

setup_assure_header_b64 = """
#<-- setup-assure-header-b64
"""

setup_assure_footer_b64 = """
#<-- setup-assure-footer-b64
"""

def print_help():
    print "git-assure understands the following commands:"
    print " setup-publish: run in a git tree, configures for push"
    print " extract-tool WHERE: writes 'assure-tool' to WHERE"

command = None
if len(sys.argv) > 1:
    command = sys.argv[1]

if command in ("help", "--help"):
    print_help()

elif command == "setup-publish":
    assert os.path.isdir(".git")
    tool = ".git/assure-tool"
    f = open(tool, "wb")
    f.write(base64.b64decode(assure_tool_b64))
    f.close()
    make_executable(tool)
    # this makes a keypair, updates .git/config, and adds a post-commit hook
    subprocess.call([tool, "setup-publish", "--create-keypair", "master"])
    # then we create ./setup-assure for clients to use
    with open("setup-assure", "wb") as f:
        f.write(base64.b64decode(setup_assure_header_b64))
        f.write(base64.b64decode(setup_assure_footer_b64))
    make_executable("setup-assure")
    # along with an assure.config with the branch->key information from
    # .git/config
    branches = get_config_verifykeys()
    with open("assure.config", "wb") as f:
        f.write("# -*- mode: conf; coding: utf-8 -*-\n")
        f.write("[branches]\n")
        for branch in sorted(branches):
            shortbranch = remove_prefix(branch, "refs/heads/", True)
            keys = " ".join([key for key in branches[branch]])
            f.write("%s = %s\n" % (shortbranch, keys))

    # then maybe execute TOOL subscribe, not sure yet

elif command == "extract-tool":
    tool = sys.argv[2]
    f = open(tool, "wb")
    f.write(base64.b64decode(assure_tool_b64))
    f.close()
    make_executable(tool)

else:
    print "unknown command '%s'" % command
    print_help()
    sys.exit(1)

